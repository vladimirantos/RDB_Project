#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDB_Project
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="rdb_measurement")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdb_log(db_log instance);
    partial void Updatedb_log(db_log instance);
    partial void Deletedb_log(db_log instance);
    partial void Insertdevice(device instance);
    partial void Updatedevice(device instance);
    partial void Deletedevice(device instance);
    partial void Insertmeasurement(measurement instance);
    partial void Updatemeasurement(measurement instance);
    partial void Deletemeasurement(measurement instance);
    partial void Insertmtype(mtype instance);
    partial void Updatemtype(mtype instance);
    partial void Deletemtype(mtype instance);
    partial void Insertpoint(point instance);
    partial void Updatepoint(point instance);
    partial void Deletepoint(point instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::RDB_Project.Properties.Settings.Default.rdb_measurementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<db_log> db_logs
		{
			get
			{
				return this.GetTable<db_log>();
			}
		}
		
		public System.Data.Linq.Table<device> devices
		{
			get
			{
				return this.GetTable<device>();
			}
		}
		
		public System.Data.Linq.Table<measurement> measurements
		{
			get
			{
				return this.GetTable<measurement>();
			}
		}
		
		public System.Data.Linq.Table<mtype> mtypes
		{
			get
			{
				return this.GetTable<mtype>();
			}
		}
		
		public System.Data.Linq.Table<point> points
		{
			get
			{
				return this.GetTable<point>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.db_log")]
	public partial class db_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_log;
		
		private string _action;
		
		private string _condition;
		
		private int _count_rows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_logChanging(int value);
    partial void Onid_logChanged();
    partial void OnactionChanging(string value);
    partial void OnactionChanged();
    partial void OnconditionChanging(string value);
    partial void OnconditionChanged();
    partial void Oncount_rowsChanging(int value);
    partial void Oncount_rowsChanged();
    #endregion
		
		public db_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_log", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_log
		{
			get
			{
				return this._id_log;
			}
			set
			{
				if ((this._id_log != value))
				{
					this.Onid_logChanging(value);
					this.SendPropertyChanging();
					this._id_log = value;
					this.SendPropertyChanged("id_log");
					this.Onid_logChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_condition", DbType="VarChar(255)")]
		public string condition
		{
			get
			{
				return this._condition;
			}
			set
			{
				if ((this._condition != value))
				{
					this.OnconditionChanging(value);
					this.SendPropertyChanging();
					this._condition = value;
					this.SendPropertyChanged("condition");
					this.OnconditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count_rows", DbType="Int NOT NULL")]
		public int count_rows
		{
			get
			{
				return this._count_rows;
			}
			set
			{
				if ((this._count_rows != value))
				{
					this.Oncount_rowsChanging(value);
					this.SendPropertyChanging();
					this._count_rows = value;
					this.SendPropertyChanged("count_rows");
					this.Oncount_rowsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.devices")]
	public partial class device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id_device;
		
		private string _serial_number;
		
		private double _accuracy;
		
		private string _description;
		
		private EntitySet<measurement> _measurements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_deviceChanging(short value);
    partial void Onid_deviceChanged();
    partial void Onserial_numberChanging(string value);
    partial void Onserial_numberChanged();
    partial void OnaccuracyChanging(double value);
    partial void OnaccuracyChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public device()
		{
			this._measurements = new EntitySet<measurement>(new Action<measurement>(this.attach_measurements), new Action<measurement>(this.detach_measurements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_device", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id_device
		{
			get
			{
				return this._id_device;
			}
			set
			{
				if ((this._id_device != value))
				{
					this.Onid_deviceChanging(value);
					this.SendPropertyChanging();
					this._id_device = value;
					this.SendPropertyChanged("id_device");
					this.Onid_deviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_serial_number", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string serial_number
		{
			get
			{
				return this._serial_number;
			}
			set
			{
				if ((this._serial_number != value))
				{
					this.Onserial_numberChanging(value);
					this.SendPropertyChanging();
					this._serial_number = value;
					this.SendPropertyChanged("serial_number");
					this.Onserial_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accuracy", DbType="Float NOT NULL")]
		public double accuracy
		{
			get
			{
				return this._accuracy;
			}
			set
			{
				if ((this._accuracy != value))
				{
					this.OnaccuracyChanging(value);
					this.SendPropertyChanging();
					this._accuracy = value;
					this.SendPropertyChanged("accuracy");
					this.OnaccuracyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="device_measurement", Storage="_measurements", ThisKey="id_device", OtherKey="device")]
		public EntitySet<measurement> measurements
		{
			get
			{
				return this._measurements;
			}
			set
			{
				this._measurements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_measurements(measurement entity)
		{
			this.SendPropertyChanging();
			entity.device1 = this;
		}
		
		private void detach_measurements(measurement entity)
		{
			this.SendPropertyChanging();
			entity.device1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.measurements")]
	public partial class measurement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_measurement;
		
		private short _device;
		
		private short _mtype;
		
		private string _description;
		
		private System.DateTime _date;
		
		private EntitySet<point> _points;
		
		private EntityRef<device> _device1;
		
		private EntityRef<mtype> _mtype1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_measurementChanging(int value);
    partial void Onid_measurementChanged();
    partial void OndeviceChanging(short value);
    partial void OndeviceChanged();
    partial void OnmtypeChanging(short value);
    partial void OnmtypeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public measurement()
		{
			this._points = new EntitySet<point>(new Action<point>(this.attach_points), new Action<point>(this.detach_points));
			this._device1 = default(EntityRef<device>);
			this._mtype1 = default(EntityRef<mtype>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_measurement", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_measurement
		{
			get
			{
				return this._id_measurement;
			}
			set
			{
				if ((this._id_measurement != value))
				{
					this.Onid_measurementChanging(value);
					this.SendPropertyChanging();
					this._id_measurement = value;
					this.SendPropertyChanged("id_measurement");
					this.Onid_measurementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_device", DbType="SmallInt NOT NULL")]
		public short device
		{
			get
			{
				return this._device;
			}
			set
			{
				if ((this._device != value))
				{
					if (this._device1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndeviceChanging(value);
					this.SendPropertyChanging();
					this._device = value;
					this.SendPropertyChanged("device");
					this.OndeviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mtype", DbType="SmallInt NOT NULL")]
		public short mtype
		{
			get
			{
				return this._mtype;
			}
			set
			{
				if ((this._mtype != value))
				{
					if (this._mtype1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmtypeChanging(value);
					this.SendPropertyChanging();
					this._mtype = value;
					this.SendPropertyChanged("mtype");
					this.OnmtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="measurement_point", Storage="_points", ThisKey="id_measurement", OtherKey="measurement")]
		public EntitySet<point> points
		{
			get
			{
				return this._points;
			}
			set
			{
				this._points.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="device_measurement", Storage="_device1", ThisKey="device", OtherKey="id_device", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public device device1
		{
			get
			{
				return this._device1.Entity;
			}
			set
			{
				device previousValue = this._device1.Entity;
				if (((previousValue != value) 
							|| (this._device1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._device1.Entity = null;
						previousValue.measurements.Remove(this);
					}
					this._device1.Entity = value;
					if ((value != null))
					{
						value.measurements.Add(this);
						this._device = value.id_device;
					}
					else
					{
						this._device = default(short);
					}
					this.SendPropertyChanged("device1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mtype_measurement", Storage="_mtype1", ThisKey="mtype", OtherKey="id_mtype", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public mtype mtype1
		{
			get
			{
				return this._mtype1.Entity;
			}
			set
			{
				mtype previousValue = this._mtype1.Entity;
				if (((previousValue != value) 
							|| (this._mtype1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._mtype1.Entity = null;
						previousValue.measurements.Remove(this);
					}
					this._mtype1.Entity = value;
					if ((value != null))
					{
						value.measurements.Add(this);
						this._mtype = value.id_mtype;
					}
					else
					{
						this._mtype = default(short);
					}
					this.SendPropertyChanged("mtype1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_points(point entity)
		{
			this.SendPropertyChanging();
			entity.measurement1 = this;
		}
		
		private void detach_points(point entity)
		{
			this.SendPropertyChanging();
			entity.measurement1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mtypes")]
	public partial class mtype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id_mtype;
		
		private string _name;
		
		private EntitySet<measurement> _measurements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_mtypeChanging(short value);
    partial void Onid_mtypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public mtype()
		{
			this._measurements = new EntitySet<measurement>(new Action<measurement>(this.attach_measurements), new Action<measurement>(this.detach_measurements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_mtype", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id_mtype
		{
			get
			{
				return this._id_mtype;
			}
			set
			{
				if ((this._id_mtype != value))
				{
					this.Onid_mtypeChanging(value);
					this.SendPropertyChanging();
					this._id_mtype = value;
					this.SendPropertyChanged("id_mtype");
					this.Onid_mtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="mtype_measurement", Storage="_measurements", ThisKey="id_mtype", OtherKey="mtype")]
		public EntitySet<measurement> measurements
		{
			get
			{
				return this._measurements;
			}
			set
			{
				this._measurements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_measurements(measurement entity)
		{
			this.SendPropertyChanging();
			entity.mtype1 = this;
		}
		
		private void detach_measurements(measurement entity)
		{
			this.SendPropertyChanging();
			entity.mtype1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.points")]
	public partial class point : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private double _x;
		
		private double _y;
		
		private int _measurement;
		
		private double _value1;
		
		private double _value2;
		
		private double _variance;
		
		private string _description;
		
		private EntityRef<measurement> _measurement1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnxChanging(double value);
    partial void OnxChanged();
    partial void OnyChanging(double value);
    partial void OnyChanged();
    partial void OnmeasurementChanging(int value);
    partial void OnmeasurementChanged();
    partial void Onvalue1Changing(double value);
    partial void Onvalue1Changed();
    partial void Onvalue2Changing(double value);
    partial void Onvalue2Changed();
    partial void OnvarianceChanging(double value);
    partial void OnvarianceChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public point()
		{
			this._measurement1 = default(EntityRef<measurement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_x", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double x
		{
			get
			{
				return this._x;
			}
			set
			{
				if ((this._x != value))
				{
					this.OnxChanging(value);
					this.SendPropertyChanging();
					this._x = value;
					this.SendPropertyChanged("x");
					this.OnxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_y", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double y
		{
			get
			{
				return this._y;
			}
			set
			{
				if ((this._y != value))
				{
					this.OnyChanging(value);
					this.SendPropertyChanging();
					this._y = value;
					this.SendPropertyChanged("y");
					this.OnyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_measurement", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int measurement
		{
			get
			{
				return this._measurement;
			}
			set
			{
				if ((this._measurement != value))
				{
					if (this._measurement1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmeasurementChanging(value);
					this.SendPropertyChanging();
					this._measurement = value;
					this.SendPropertyChanged("measurement");
					this.OnmeasurementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value1", DbType="Float NOT NULL")]
		public double value1
		{
			get
			{
				return this._value1;
			}
			set
			{
				if ((this._value1 != value))
				{
					this.Onvalue1Changing(value);
					this.SendPropertyChanging();
					this._value1 = value;
					this.SendPropertyChanged("value1");
					this.Onvalue1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value2", DbType="Float NOT NULL")]
		public double value2
		{
			get
			{
				return this._value2;
			}
			set
			{
				if ((this._value2 != value))
				{
					this.Onvalue2Changing(value);
					this.SendPropertyChanging();
					this._value2 = value;
					this.SendPropertyChanged("value2");
					this.Onvalue2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_variance", DbType="Float NOT NULL")]
		public double variance
		{
			get
			{
				return this._variance;
			}
			set
			{
				if ((this._variance != value))
				{
					this.OnvarianceChanging(value);
					this.SendPropertyChanging();
					this._variance = value;
					this.SendPropertyChanged("variance");
					this.OnvarianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="measurement_point", Storage="_measurement1", ThisKey="measurement", OtherKey="id_measurement", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public measurement measurement1
		{
			get
			{
				return this._measurement1.Entity;
			}
			set
			{
				measurement previousValue = this._measurement1.Entity;
				if (((previousValue != value) 
							|| (this._measurement1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._measurement1.Entity = null;
						previousValue.points.Remove(this);
					}
					this._measurement1.Entity = value;
					if ((value != null))
					{
						value.points.Add(this);
						this._measurement = value.id_measurement;
					}
					else
					{
						this._measurement = default(int);
					}
					this.SendPropertyChanged("measurement1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
